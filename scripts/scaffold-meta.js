#!/usr/bin/env node
const fs = require('fs');
const path = require('path');

const ROOT = path.resolve(__dirname, '..');
const INBOX = path.join(ROOT, '_Inbox');
const GROUP = path.join(ROOT, 'Grupo AreLuna');

function safe(val, def) {
  return (val === undefined || val === null || val === '') ? def : val;
}

function createMeta(projectPath, defaults = {}) {
  const metaPath = path.join(projectPath, 'project.meta.json');
  if (fs.existsSync(metaPath)) return false;
  const name = path.basename(projectPath);
  const meta = {
    name,
    client: safe(process.env.TRAE_DEFAULT_CLIENT, 'Grupo AreLuna'),
    year: Number(safe(process.env.TRAE_DEFAULT_YEAR, new Date().getFullYear())),
    status: safe(process.env.TRAE_DEFAULT_STATUS, 'active'),
    tech: (defaults.tech || ['Next.js', 'NestJS', 'Supabase', 'PostgreSQL']),
    tags: (defaults.tags || ['ERP', 'Azure', 'Tailwind']),
    notes: safe(defaults.notes, 'Initial scaffold generated by Trae scripts.'),
  };
  fs.writeFileSync(metaPath, JSON.stringify(meta, null, 2));
  return true;
}

function main() {
  const targets = process.argv.slice(2);
  let created = 0;
  let skipped = 0;

  const listDirs = (p) => fs.readdirSync(p)
    .map((e) => path.join(p, e))
    .filter((x) => fs.existsSync(x) && fs.lstatSync(x).isDirectory());

  const isCandidateProject = (dir) => {
    const markers = ['package.json', 'server.js', 'vercel.json', 'index.html'];
    const hasMarker = markers.some((f) => fs.existsSync(path.join(dir, f)));
    const hasTrae = fs.existsSync(path.join(dir, '.trae')) && fs.lstatSync(path.join(dir, '.trae')).isDirectory();
    return hasMarker || hasTrae;
  };

  const candidates = targets.length ? targets : [INBOX, GROUP];

  candidates.forEach((base) => {
    if (!fs.existsSync(base)) return;
    listDirs(base).forEach((dir) => {
      if (!isCandidateProject(dir)) { skipped++; return; }
      const ok = createMeta(dir);
      if (ok) created++; else skipped++;
    });
  });

  const report = { timestamp: new Date().toISOString(), created, skipped };
  const reportPath = path.join(ROOT, '_Index', `scaffold-report-${Date.now()}.json`);
  try { fs.writeFileSync(reportPath, JSON.stringify(report, null, 2)); } catch {}
  console.log(`âœ… Meta scaffold complete â€” created: ${created}, skipped: ${skipped}`);
  console.log('ðŸ“„ Report:', reportPath);
}

main();