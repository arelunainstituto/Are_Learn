// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// ===== CORE MODELS =====

model Tenant {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  domain      String?
  settings    String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  users              User[]
  companies          Company[]
  warehouses         Warehouse[]
  locations          Location[]
  categories         Category[]
  products           Product[]
  variants           ProductVariant[]
  batches            Batch[]
  series             Series[]
  items              InventoryItem[]
  movements          InventoryMovement[]
  stockBalances      StockBalance[]
  reservations       StockReservation[]
  documents          Document[]
  documentLines      DocumentLine[]
  stockLedger        StockLedger[]
  auditTrail         AuditTrail[]
  integrationMappings IntegrationMapping[]
  stockMovements     StockMovement[]
  outboxEvents       OutboxEvent[]

  @@map("tenants")
}

model User {
  id        String   @id @default(cuid())
  tenantId  String
  email     String   @unique
  name      String?
  role      String   @default("user")
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  tenant    Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  companies Company[]
  documents Document[]

  @@map("users")
}

model Company {
  id                String   @id @default(cuid())
  tenantId          String
  name              String
  code              String
  taxId             String?  // NIPC
  address           String?
  phone             String?
  email             String?
  legalNature       String?  // Natureza Jurídica
  socialCapital     Float?   // Capital Social
  socialObject      String?  // Objeto Social
  management        String?  // Gerência
  iban              String?  // IBAN
  contributoryStatus String? // Situação Contributiva
  shareholdings     String?  // Participações Societárias
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  tenant     Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  users      User[]
  warehouses Warehouse[]
  documents  Document[]

  @@unique([tenantId, code])
  @@map("companies")
}

// ===== WAREHOUSE MANAGEMENT =====

model Warehouse {
  id        String   @id @default(cuid())
  tenantId  String
  companyId String?
  name      String
  code      String
  address   String?
  settings  String?  @default("{}")
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  tenant            Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  company           Company?            @relation(fields: [companyId], references: [id])
  locations         Location[]
  items             InventoryItem[]
  movementsFrom     InventoryMovement[] @relation("MovementFromWarehouse")
  movementsTo       InventoryMovement[] @relation("MovementToWarehouse")
  stockBalances     StockBalance[]
  reservations      StockReservation[]
  documents         Document[]
  documentLines     DocumentLine[]
  stockMovements    StockMovement[]

  @@unique([tenantId, code])
  @@map("warehouses")
}

model Location {
  id          String   @id @default(cuid())
  tenantId    String
  warehouseId String
  name        String
  code        String
  parentId    String?
  type        String   @default("zone") // zone, aisle, shelf, bin
  capacity    Float?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  tenant         Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  warehouse      Warehouse           @relation(fields: [warehouseId], references: [id], onDelete: Cascade)
  parent         Location?           @relation("LocationHierarchy", fields: [parentId], references: [id])
  children       Location[]          @relation("LocationHierarchy")
  items          InventoryItem[]
  movementsFrom  InventoryMovement[] @relation("MovementFromLocation")
  movementsTo    InventoryMovement[] @relation("MovementToLocation")
  stockBalances  StockBalance[]
  reservations   StockReservation[]
  documentLines  DocumentLine[]
  stockMovements StockMovement[]

  @@unique([tenantId, warehouseId, code])
  @@map("locations")
}

// ===== PRODUCT CATALOG =====

model Category {
  id          String   @id @default(cuid())
  tenantId    String
  name        String
  code        String
  description String?
  parentId    String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  tenant   Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")
  products Product[]

  @@unique([tenantId, code])
  @@map("categories")
}

model Product {
  id            String   @id @default(cuid())
  tenantId      String
  categoryId    String?
  name          String
  code          String
  sku           String   @default("")
  description   String?
  type          String?  // ProductType enum as string
  brand         String?
  model         String?
  unitOfMeasure String   @default("unit")
  weight        Float?
  dimensions    String?  // JSON string
  costPrice     Float?
  sellingPrice  Float?
  minStock      Float?
  maxStock      Float?
  reorderPoint  Float?
  isActive      Boolean  @default(true)
  isTrackable   Boolean  @default(false)
  tags          String?  // JSON array as string
  attributes    String?  // JSON object as string
  externalId    String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  tenant        Tenant             @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  category      Category?          @relation(fields: [categoryId], references: [id])
  variants      ProductVariant[]
  items         InventoryItem[]
  stockBalances StockBalance[]
  reservations  StockReservation[]
  documentLines DocumentLine[]
  stockMovements StockMovement[]

  @@unique([tenantId, code])
  @@unique([tenantId, sku])
  @@map("products")
}

model ProductVariant {
  id        String   @id @default(cuid())
  tenantId  String
  productId String
  name      String
  code      String
  sku       String?
  barcode   String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  tenant        Tenant             @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  product       Product            @relation(fields: [productId], references: [id], onDelete: Cascade)
  items         InventoryItem[]
  stockBalances StockBalance[]
  reservations  StockReservation[]
  documentLines DocumentLine[]
  stockMovements StockMovement[]

  @@unique([tenantId, productId, code])
  @@map("product_variants")
}

model Batch {
  id             String    @id @default(cuid())
  tenantId       String
  batchNumber    String
  productId      String?
  variantId      String?
  manufacturingDate DateTime?
  expirationDate DateTime?
  status         String    @default("available") // available, expired, quarantine
  notes          String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  tenant        Tenant             @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  items         InventoryItem[]
  stockBalances StockBalance[]
  reservations  StockReservation[]
  stockMovements StockMovement[]
  documentLines DocumentLine[]

  @@unique([tenantId, batchNumber])
  @@map("batches")
}

model Series {
  id           String   @id @default(cuid())
  tenantId     String
  serialNumber String
  productId    String?
  variantId    String?
  batchId      String?
  status       String   @default("available") // available, sold, returned, defective
  notes        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  tenant        Tenant             @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  items         InventoryItem[]
  stockBalances StockBalance[]
  reservations  StockReservation[]
  stockMovements StockMovement[]
  documentLines DocumentLine[]

  @@unique([tenantId, serialNumber])
  @@map("series")
}

// ===== INVENTORY MANAGEMENT =====

model InventoryItem {
  id            String   @id @default(cuid())
  tenantId      String
  warehouseId   String
  locationId    String?
  productId     String
  variantId     String?
  batchId       String?
  seriesId      String?
  quantity      Float    @default(0)
  reservedQty   Float    @default(0)
  availableQty  Float    @default(0)
  unitCost      Float?
  lastMovementAt DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  tenant    Tenant          @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  warehouse Warehouse       @relation(fields: [warehouseId], references: [id], onDelete: Cascade)
  location  Location?       @relation(fields: [locationId], references: [id])
  product   Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant   ProductVariant? @relation(fields: [variantId], references: [id])
  batch     Batch?          @relation(fields: [batchId], references: [id])
  series    Series?         @relation(fields: [seriesId], references: [id])
  movements InventoryMovement[]

  @@unique([tenantId, warehouseId, locationId, productId, variantId, batchId, seriesId])
  @@map("inventory_items")
}

model StockBalance {
  id            String   @id @default(cuid())
  tenantId      String
  warehouseId   String
  locationId    String?
  productId     String
  variantId     String?
  batchId       String?
  seriesId      String?
  quantity      Float    @default(0)
  reservedQty   Float    @default(0)
  availableQty  Float    @default(0)
  unitCost      Float?
  lastMovementAt DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  tenant    Tenant          @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  warehouse Warehouse       @relation(fields: [warehouseId], references: [id], onDelete: Cascade)
  location  Location?       @relation(fields: [locationId], references: [id])
  product   Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant   ProductVariant? @relation(fields: [variantId], references: [id])
  batch     Batch?          @relation(fields: [batchId], references: [id])
  series    Series?         @relation(fields: [seriesId], references: [id])

  @@unique([tenantId, warehouseId, locationId, productId, variantId, batchId, seriesId])
  @@map("stock_balances")
}

model StockReservation {
  id          String    @id @default(cuid())
  tenantId    String
  warehouseId String
  locationId  String?
  productId   String
  variantId   String?
  batchId     String?
  seriesId    String?
  quantity    Float
  reason      String
  reference   String?
  expiresAt   DateTime?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  tenant    Tenant          @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  warehouse Warehouse       @relation(fields: [warehouseId], references: [id], onDelete: Cascade)
  location  Location?       @relation(fields: [locationId], references: [id])
  product   Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant   ProductVariant? @relation(fields: [variantId], references: [id])
  batch     Batch?          @relation(fields: [batchId], references: [id])
  series    Series?         @relation(fields: [seriesId], references: [id])

  @@map("stock_reservations")
}

// ===== DOCUMENT MANAGEMENT =====

model Document {
  id            String   @id @default(cuid())
  tenantId      String
  companyId     String?
  warehouseId   String?
  type          String   // receipt, shipment, adjustment, transfer
  number        String
  reference     String?
  status        String   @default("draft") // draft, confirmed, cancelled
  date          DateTime @default(now())
  notes         String?
  metadata      String?
  createdBy     String?
  confirmedAt   DateTime?
  confirmedBy   String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  tenant        Tenant         @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  company       Company?       @relation(fields: [companyId], references: [id])
  warehouse     Warehouse?     @relation(fields: [warehouseId], references: [id])
  createdByUser User?          @relation(fields: [createdBy], references: [id])
  lines         DocumentLine[]
  movements     InventoryMovement[]
  stockMovements StockMovement[]

  @@unique([tenantId, number])
  @@map("documents")
}

model DocumentLine {
  id          String  @id @default(cuid())
  tenantId    String
  documentId  String
  warehouseId String?
  locationId  String?
  productId   String
  variantId   String?
  batchId     String?
  seriesId    String?
  quantity    Float
  unitCost    Float?
  totalCost   Float?
  notes       String?
  lineNumber  Int     @default(1)

  // Relations
  tenant    Tenant          @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  document  Document        @relation(fields: [documentId], references: [id], onDelete: Cascade)
  warehouse Warehouse?      @relation(fields: [warehouseId], references: [id])
  location  Location?       @relation(fields: [locationId], references: [id])
  product   Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant   ProductVariant? @relation(fields: [variantId], references: [id])
  batch     Batch?          @relation(fields: [batchId], references: [id])
  series    Series?         @relation(fields: [seriesId], references: [id])

  @@map("document_lines")
}

// ===== MOVEMENT TRACKING =====

model InventoryMovement {
  id              String    @id @default(cuid())
  tenantId        String
  itemId          String?
  documentId      String?
  type            String    // receipt, shipment, adjustment, transfer
  fromWarehouseId String?
  toWarehouseId   String?
  fromLocationId  String?
  toLocationId    String?
  productId       String
  variantId       String?
  batchId         String?
  seriesId        String?
  quantity        Float
  unitCost        Float?
  totalCost       Float?
  reason          String?
  reference       String?
  processedAt     DateTime  @default(now())
  createdAt       DateTime  @default(now())

  // Relations
  tenant        Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  item          InventoryItem? @relation(fields: [itemId], references: [id])
  document      Document?  @relation(fields: [documentId], references: [id])
  fromWarehouse Warehouse? @relation("MovementFromWarehouse", fields: [fromWarehouseId], references: [id])
  toWarehouse   Warehouse? @relation("MovementToWarehouse", fields: [toWarehouseId], references: [id])
  fromLocation  Location?  @relation("MovementFromLocation", fields: [fromLocationId], references: [id])
  toLocation    Location?  @relation("MovementToLocation", fields: [toLocationId], references: [id])

  @@map("inventory_movements")
}

model StockLedger {
  id            String   @id @default(cuid())
  tenantId      String
  warehouseId   String
  locationId    String?
  productId     String
  variantId     String?
  batchId       String?
  seriesId      String?
  movementType  String   // in, out, adjustment
  quantity      Float
  runningBalance Float
  unitCost      Float?
  reference     String?
  processedAt   DateTime @default(now())
  createdAt     DateTime @default(now())

  // Relations
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("stock_ledger")
}

// ===== AUDIT & COMPLIANCE =====

model AuditTrail {
  id         String   @id @default(cuid())
  tenantId   String
  entityType String   // table name
  entityId   String   // record id
  action     String   // create, update, delete
  oldValues  String?
  newValues  String?
  userId     String?
  timestamp  DateTime @default(now())
  ipAddress  String?
  userAgent  String?

  // Relations
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("audit_trail")
}

// ===== INTEGRATION SUPPORT =====

model IntegrationMapping {
  id           String   @id @default(cuid())
  tenantId     String
  entityType   String   // product, warehouse, etc.
  internalId   String   // our system ID
  externalId   String   // external system ID
  externalSystem String // erp, wms, etc.
  metadata     String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, entityType, externalSystem, externalId])
  @@map("integration_mappings")
}

// ===== MOVEMENT ENGINE MODELS =====

model StockMovement {
  id          String   @id @default(cuid())
  tenantId    String
  documentId  String
  productId   String
  variantId   String?
  batchId     String?
  seriesId    String?
  warehouseId String
  locationId  String?
  type        String   // IN, OUT, ADJUSTMENT
  quantity    Float
  unitCost    Float?
  totalCost   Float?
  reference   String?
  processedAt DateTime @default(now())
  createdAt   DateTime @default(now())

  // Relations
  tenant    Tenant          @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  document  Document        @relation(fields: [documentId], references: [id], onDelete: Cascade)
  product   Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant   ProductVariant? @relation(fields: [variantId], references: [id])
  batch     Batch?          @relation(fields: [batchId], references: [id])
  series    Series?         @relation(fields: [seriesId], references: [id])
  warehouse Warehouse       @relation(fields: [warehouseId], references: [id])
  location  Location?       @relation(fields: [locationId], references: [id])

  @@map("stock_movements")
}

model OutboxEvent {
  id          String   @id @default(cuid())
  tenantId    String
  eventType   String   // stock.movement.created, document.confirmed, etc.
  aggregateId String   // document ID, movement ID, etc.
  payload     String
  status      String   @default("pending") // pending, processing, completed, failed
  retryCount  Int      @default(0)
  maxRetries  Int      @default(3)
  scheduledAt DateTime @default(now())
  processedAt DateTime?
  error       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("outbox_events")
}